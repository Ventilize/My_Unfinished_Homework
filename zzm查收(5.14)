
#include <Windows.h>
#include <winuser.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "graphics.h"
#include "extgraph.h"
#include "imgui.h"

#define MAX_LINE 100
#define MAX_ROWS 50

char text[MAX_ROWS][MAX_LINE + 1];

/*全局变量*/
typedef struct line {
	char linetext[100];
	struct line* next;
}line;
/*暂时未用*/
struct Area
{
	double start_x;
	double end_x;
	double start_y;
	double end_y;
}area;
double winheight, winwidth; //最大窗口尺寸
double mouse_x = 0, mouse_y = 0; //鼠标位置
int flag = 0;//针对diaplay0
char alltext[10000];
double text_x, text_y, text_height;
int current_line = 0;
int current_line_length = 0;
int line_count = 0;
int ifpress = 0;  //用于是否显示说明

/*newly add by wyz*/
int Now_x;
int Now_y;
int ifopen = 0;
int ifsave = 0;

/*有关分类的变量*/
int allnotes = 0; //所有笔记的数量
int allclasses = 0; //所有类别的数量
struct Note {
	char* title;  //笔记名字
	char* class;  //笔记类别
};


/*会放在头文件中*/
void DrawMenu(); //在display1()(新建笔记) 里面用到,可参考上一届和7-simplegui.c 108行开始
void DrawHeadArea(); //@已完成
void DrawNotebooks();//@
void DisplayClear(void);
void myKeyboardEvent(int key, int event);
void myCharEvent(char ch);
void myMouseEvent(int x, int y, int button, int event);
// 用户的显示函数
void display0();         // 用于主界面的display0
void write_display();         // 用于新建文件
void display2();         // 用于查看文件
void Colors();           //自定义一些颜色

/*保存和打开*/
int FileDialogOpen(char* path);
int FileDialogSave(char* path);
void newfile();
void openfile();
void GetFile(FILE* p, char c);
void savefile();

/*分类的函数*/
void drawClass();

int isPrintable(int ch)//z是否能进行输入
{
	return ch >= VK_SPACE && ch < 127 || ch < 0;
}

int InsertNewLine()
{
	int y;
	if (line_count == MAX_ROWS)
		return 0;
	for (y = line_count; y > current_line + 1; y--)
		strcpy(text[y], text[y - 1]);
	line_count++;
	current_line++;
	text[current_line][0] = '\0';
	current_line_length = 0;
	return 1;
}

int RemoveLine(int k)
{
	int y;
	if (line_count < 2)
		return 0;
	for (y = k; y < line_count - 1; y++)
		strcpy(text[y], text[y + 1]);
	line_count--;
	return 1;
}

void Main()
{
	//registerTimerEvent(TimerEventProcess);      // 定时器

	SetWindowTitle("nia做笔记");
	SetWindowSize(10, 10);
	winheight = 10.0;
	winwidth = 10.0;
	InitGraphics();
	text_height = GetFontHeight() * 1.5;
	text_x = 0.2;
	text_y = GetWindowHeight() / 8 * 7;
	registerCharEvent(myCharEvent);
	registerKeyboardEvent(myKeyboardEvent);
	registerMouseEvent(myMouseEvent);

	DrawHeadArea();
	DrawNotebooks();
}

void write_display() {  //这是新建笔记界面
	/*讨论,在新建的时候确认分类,在保存的时候弹出c盘之类的*/
	DisplayClear();//WYZ添加
	int y;
	double py = text_y;
	for (y = 0; y < line_count; y++) {
		py = text_y - text_height * y;
		//if (y != line_count - 1)continue;
		//MovePen(0, py); DrawTextString(text[y]);
	}
	MovePen(0, py);
	DrawTextString(text[y]);
	//MovePen(text_x - 0.1, text_y - text_height * current_line);
	//DrawTextString("*");
	DrawMenu(); //画菜单
	//drawBox(0, 0, 0.5, 0.5, 0, "类别", "L", "Bl_1");

}

//void DrawMenu(); 画菜单, 在display1()(新建笔记) 里面用到,可参考上一届和7-simplegui.c 108行开始
void DrawMenu() {
	SetFont("宋体");
	SetPointSize(15);
	SetStyle(1);//并不理解
	//以下需要列出多个处理文本的功能
	static char* menuListFile[] = { "文件", "保存", "分类", "打开"};
	static char* menuListBack[] = { "返回", "上一级", "退出" };

	setMenuColors("White", "Blue", "White", "black", 1);
	//这一句的效果: 白底黑字,当鼠标移上去的时候,字变成蓝色

	int selection = 0;
	double fH = GetFontHeight(); //这是当前字体的高度
	//左上角排列菜单
	double x = 0;//说明菜单从最左边开始
	double y = winheight;//说明菜单从最上面开始
	double h = fH * 1.8;//菜单的高度
	double w = TextStringWidth(menuListFile[0]) * 3; //是"文件"宽度的3倍
	drawMenuBar(x, y - h, 6 * w, h);//
	//左下角的类别
	//drawBox(x,0,0.5,0.5,0,"类别","L","Bl_1");

	/*以下归属于"文件"*/
	selection = menuList(GenUIID(0), x, y - h, w, w, h, menuListFile, sizeof(menuListFile) / sizeof(menuListFile[0]));
	if (selection == 1)
	{
		/*保存文件*/
		ifsave = 1;
		savefile();
		ifsave = 0;
		area.start_x = 0;
		area.end_x = 0;
		area.start_y = 0;
		area.end_y = 0;
	}
	if (selection == 2)
	{
		/*笔记分类*/
	}
	if (selection == 3)
	{
		ifopen = 1;
		openfile();
		ifopen = 0;
	}

	/*以下归属"返回"*/
	selection = menuList(GenUIID(0), x + w, y - h, w, w, h, menuListBack, sizeof(menuListBack) / sizeof(menuListBack[0]));
	if (selection == 1)
	{
		/*返回上一级*/
		flag = 0;
		display0();
	}
	if (selection == 2) {
		/*直接退出,作用和 × 一样*/
		exit(-1);
	}

	/*以下为新增功能*/
}

void display2()        // 用于查看文件
{
	SetFont("宋体");
	SetPointSize(15);
	SetStyle(1);//并不理解
	//以下需要列出多个处理文本的功能
	//static char* menuListFile[] = { "文件", "保存", "分类" };
	static char* menuListBack[] = { "返回", "上一级", "退出" };

	setMenuColors("White", "Blue", "White", "black", 1);
	//这一句的效果: 白底黑字,当鼠标移上去的时候,字变成蓝色

	int selection = 0;
	double fH = GetFontHeight(); //这是当前字体的高度
	//左上角排列菜单
	double x = 0;//说明菜单从最左边开始
	double y = winheight;//说明菜单从最上面开始
	double h = fH * 1.8;//菜单的高度
	double w = TextStringWidth(menuListBack[0]) * 3; //是"返回"宽度的3倍
	drawMenuBar(x, y - h, 6 * w, h);//

	/*以下归属于"返回"*/
	selection = menuList(GenUIID(0), x, y - h, w, w, h, menuListBack, sizeof(menuListBack) / sizeof(menuListBack[0]));
	if (selection == 1)
	{
		/*返回上一级*/
		flag = 0;
		display0();
	}
	if (selection == 2)
	{
		exit(-1);
	}


	drawClass();//显示当前所有类别,包括默认分类和自定义分类
}

/*定义新颜色*/
void Colors() {
	//参考上一届思维导图的颜色设置
	/*建议更改*/
	//枣泥玫瑰 
	DefineColor("Re_1", 0.95, 0.82, 0.85);
	DefineColor("Re_2", 0.94, 0.65, 0.69);
	DefineColor("Re_3", 0.94, 0.57, 0.56);
	DefineColor("Re_4", 0.86, 0.22, 0.33);
	//普鲁士蓝
	DefineColor("Bl_1", 0.63, 0.83, 0.85);
	DefineColor("Bl_2", 0.13, 0.48, 0.73);
	DefineColor("Bl_3", 0.10, 0.25, 0.40);
	DefineColor("Bl_4", 0.11, 0.31, 0.48);
	//柳色青青
	DefineColor("Gr_1", 0.62, 0.85, 0.78);
	DefineColor("Gr_2", 0.53, 0.78, 0.66);
	DefineColor("Gr_3", 0.44, 0.79, 0.6);
	DefineColor("Gr_4", 0.19, 0.76, 0.65);
	//黄色系 
	DefineColor("Ye_1", 1.0, 0.87, 0.72);
	DefineColor("Ye_2", 1.0, 0.84, 0.53);
	DefineColor("Ye_3", 1.0, 0.89, 0.70);
	DefineColor("Ye_4", 0.94, 0.78, 0);
}

void display0()
{
	DisplayClear();

	if (flag == 0)
	{
		DrawNotebooks();
		DrawHeadArea();
	}
	if (flag == 1) //新建笔记
	{
		newfile();
		write_display();
	}
	if (flag == 2) //查看笔记
	{
		display2();
	}
	if (flag == 3)
	{
		int size = GetPointSize();
		if (ifpress)
		{
			DefineColor("mycolor", 0.62, 0.85, 0.78);
			SetPenColor("mycolor");
			drawRectangle(0.25 * winwidth, 0.05 * winheight, 0.5 * winwidth, 0.15 * winheight, 1);
			SetPenColor("Black");
			SetPointSize(20);
			drawLabel(0.3 * winwidth, 0.18 * winheight, "1.新建笔记后可直接输入文本;");
			drawLabel(0.3 * winwidth, 0.15 * winheight, "2.请不要在保存的进程中退出;");
			//drawBox(0.1 * winwidth, 0.1 * winheight, 0.8 * winwidth, 0.2 * winheight, 1, " ", "L", "Blue");
		}
		SetPointSize(size);
		DrawNotebooks();
		DrawHeadArea();

	}

}

/*输出“欢迎使用nia笔记本”*/
void DrawHeadArea()
{
	DefineColor("mycolor", 0.90196, 0.90196, 0.90196);
	SetPenColor("mycolor");
	drawRectangle(0, winheight - 0.3125 * 4, winwidth, 3 * 0.3125, 1);
	SetPenColor("Black");
	SetFont("楷体");
	SetPointSize(40);
	drawLabel(0.33 * winwidth, winheight - 2 * 0.3125 - 0.3, "欢迎使用nia笔记本");
}

/*主界面两个笔记按钮*/
void DrawNotebooks()
{
	double w = 2.0;
	double h = 2.6;
	if (button(GenUIID(0), 0.20 * winwidth, 0.33 * winheight, w, h, "新建笔记")) {
		flag = 1;
		DisplayClear();
	}
	if (button(GenUIID(0), 0.60 * winwidth, 0.33 * winheight, w, h, "查看笔记")) {
		flag = 2;
		DisplayClear();
	}
	if (button(GenUIID(0), 0.33 * winwidth, 0.2 * winheight, 0.33 * winwidth, 0.08 * winheight, ifpress ? "关闭说明" : "使用说明"))
	{
		ifpress = !ifpress;
		flag = 3;
		if (ifpress) {
			//setButtonColors("Gr_1", "Black", "Gr_2", "Blue", 1);
			//drawBox(0.2 * winwidth, 0.1 * winheight, 0.6 * winwidth, 0.2 * winheight, 0, "", "C", "Blue");
		}
	}
	//具体实现进入display0
}

void myMouseEvent(int x, int y, int button, int event)
{
	mouse_x = ScaleXInches(x);
	mouse_y = ScaleYInches(y);
	uiGetMouse(x, y, button, event);
	display0();
}

// 用户的字符事件响应函数
void myCharEvent(char ch)
{
	int maxnum = MAX_LINE;
	int reserveOneChar = 1;
	uiGetChar(ch);

	switch (ch) {
	case VK_ESCAPE:
		exit(-1);
	default:
		// ch<0 表示扩展字符（例如中文字）
		// 两个<0的char表示一个中文字
		if (ch < 0)  maxnum -= reserveOneChar;
		if (isPrintable(ch) || current_line_length < maxnum) {
			text[current_line][current_line_length++] = ch;
			//将字符加入到行尾
			text[current_line][current_line_length] = '\0';
			if (ch < 0)
				// 当 ch<0, reserveOneChar=1, 表示汉字的第1个char
				// 当 ch<0, reserveOneChar=0, 表示汉字的第2个char
				reserveOneChar = 1 - reserveOneChar;
			write_display();
		}
		break;
	}
}

// 用户的键盘事件响应函数
void myKeyboardEvent(int key, int event)
{
	if (event == KEY_UP) {
		//printf("key=%dc\n", key);
		switch (key) {
		case VK_LEFT:
		case VK_UP:
		case VK_PRIOR:
			if (current_line > 0) {
				current_line--;
				current_line_length = strlen(text[current_line]);
				write_display();
			}
			break;
		case VK_RIGHT:
		case VK_NEXT:
		case VK_DOWN:
			if (current_line < line_count - 1) {
				current_line++;
				current_line_length = strlen(text[current_line]);
				write_display();
			}
			break;
		case VK_RETURN:
			if (InsertNewLine())
				write_display();
			break;
		case VK_BACK:
			if (current_line_length > 0) {
				text[current_line][--current_line_length] = '\0';
				write_display();
			}
			else if (RemoveLine(current_line)) {
				if (current_line > 0)
					current_line--;
				current_line_length = strlen(text[current_line]);
				write_display();
			}
			break;
		}
	}
}


// 返回值: 成功 1, 失败 0
// 通过 path 返回获取的路径
int FileDialogOpen(char* path)
{
	OPENFILENAME ofn; //  公共对话框结构
	ZeroMemory(&ofn, sizeof(ofn));
	ofn.lStructSize = sizeof(ofn); // 结构大小
	ofn.lpstrFile = path; // 路径
	ofn.nMaxFile = MAX_PATH; // 路径大小
	ofn.lpstrFilter = "All\0*.*\0Text\0*.TXT\0"; // 文件类型
	ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST;
	return GetOpenFileName(&ofn);
}

int FileDialogSave(char* path)
{
	OPENFILENAME ofn; //  公共对话框结构
	TCHAR szFile[MAX_PATH]; //  保存获取文件名称的缓冲区
	ZeroMemory(&ofn, sizeof(ofn));
	ofn.lStructSize = sizeof(ofn); // 结构大小
	ofn.lpstrFile = path; // 路径
	ofn.nMaxFile = MAX_PATH; // 路径大小
	ofn.lpstrFilter = "All\0*.*\0Text\0*.TXT\0"; // 文件类型
	ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST;
	if (GetSaveFileName(&ofn))
	{
		OutputDebugString(szFile); // 显示选择的文件。
	}
	return GetSaveFileName(&ofn);
}


/* 新建文件 */
void newfile()
{
	/*清空主字符串*/
	memset(alltext, 0, sizeof(alltext));
	write_display();
}

/* 打开文件 */
void openfile()
{

	/*文件名字 */
	char filename[512] = { 0 };

	if (ifopen == 1)
	{
		if (FileDialogOpen(filename) == 0)
		{
			return;
		}
		else
		{
			/* 设置定位字符均为0*/
			Now_x = 0;
			Now_y = 0;

			/* 打开文件*/
			FILE* fp = fopen(filename, "a+");

			/* 设置字符串*/
			memset(alltext, 0, sizeof(alltext));

			/* 获取文件内容*/
			int ch = fgetc(fp);
			GetFile(fp, ch);

			write_display();
			fclose(fp);
		}
	}
	write_display();
}

/* 获取文件内容 */
void GetFile(FILE* p, char c)
{
	if (c == EOF)
		return;
	else
	{
		//CharEventProcess(c);
		myCharEvent(c);
		c = fgetc(p);
		GetFile(p, c);
	}
}


/* 保存文件 */
void savefile()
{
	char filename[512] = { 0 };
	if (ifsave == 1)
	{
		if (FileDialogSave(filename) == 0)
		{

		}
	}

	FILE* fp = fopen(filename, "wb");

	fputs(alltext, fp);
	fclose(fp);
	allnotes++;
	
	write_display();
}

void drawClass()
{

}
